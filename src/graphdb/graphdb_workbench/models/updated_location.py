# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from graphdb.graphdb_workbench.configuration import Configuration


class UpdatedLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type': 'str',
        'default_repository': 'str',
        'password': 'str',
        'uri': 'str',
        'username': 'str'
    }

    attribute_map = {
        'auth_type': 'authType',
        'default_repository': 'defaultRepository',
        'password': 'password',
        'uri': 'uri',
        'username': 'username'
    }

    def __init__(self, auth_type=None, default_repository=None, password=None, uri=None, username=None, _configuration=None):  # noqa: E501
        """UpdatedLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_type = None
        self._default_repository = None
        self._password = None
        self._uri = None
        self._username = None
        self.discriminator = None

        if auth_type is not None:
            self.auth_type = auth_type
        if default_repository is not None:
            self.default_repository = default_repository
        if password is not None:
            self.password = password
        if uri is not None:
            self.uri = uri
        if username is not None:
            self.username = username

    @property
    def auth_type(self):
        """Gets the auth_type of this UpdatedLocation.  # noqa: E501

        Authentication type  # noqa: E501

        :return: The auth_type of this UpdatedLocation.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this UpdatedLocation.

        Authentication type  # noqa: E501

        :param auth_type: The auth_type of this UpdatedLocation.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "basic", "signature"]  # noqa: E501
        if (self._configuration.client_side_validation and
                auth_type not in allowed_values):
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def default_repository(self):
        """Gets the default_repository of this UpdatedLocation.  # noqa: E501

        Default repository for the location.  # noqa: E501

        :return: The default_repository of this UpdatedLocation.  # noqa: E501
        :rtype: str
        """
        return self._default_repository

    @default_repository.setter
    def default_repository(self, default_repository):
        """Sets the default_repository of this UpdatedLocation.

        Default repository for the location.  # noqa: E501

        :param default_repository: The default_repository of this UpdatedLocation.  # noqa: E501
        :type: str
        """

        self._default_repository = default_repository

    @property
    def password(self):
        """Gets the password of this UpdatedLocation.  # noqa: E501

        Password for the new location if any. This parameter only makes sense for remote locations  # noqa: E501

        :return: The password of this UpdatedLocation.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdatedLocation.

        Password for the new location if any. This parameter only makes sense for remote locations  # noqa: E501

        :param password: The password of this UpdatedLocation.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def uri(self):
        """Gets the uri of this UpdatedLocation.  # noqa: E501

        The GraphDB location URL  # noqa: E501

        :return: The uri of this UpdatedLocation.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this UpdatedLocation.

        The GraphDB location URL  # noqa: E501

        :param uri: The uri of this UpdatedLocation.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def username(self):
        """Gets the username of this UpdatedLocation.  # noqa: E501

        Username for the new location if any. This parameter only makes sense for remote locations  # noqa: E501

        :return: The username of this UpdatedLocation.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdatedLocation.

        Username for the new location if any. This parameter only makes sense for remote locations  # noqa: E501

        :param username: The username of this UpdatedLocation.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatedLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatedLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdatedLocation):
            return True

        return self.to_dict() != other.to_dict()
