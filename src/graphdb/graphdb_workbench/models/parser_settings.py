# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from graphdb.graphdb_workbench.configuration import Configuration


class ParserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fail_on_unknown_data_types': 'bool',
        'fail_on_unknown_language_tags': 'bool',
        'normalize_data_type_values': 'bool',
        'normalize_language_tags': 'bool',
        'preserve_b_node_ids': 'bool',
        'stop_on_error': 'bool',
        'verify_data_type_values': 'bool',
        'verify_language_tags': 'bool'
    }

    attribute_map = {
        'fail_on_unknown_data_types': 'failOnUnknownDataTypes',
        'fail_on_unknown_language_tags': 'failOnUnknownLanguageTags',
        'normalize_data_type_values': 'normalizeDataTypeValues',
        'normalize_language_tags': 'normalizeLanguageTags',
        'preserve_b_node_ids': 'preserveBNodeIds',
        'stop_on_error': 'stopOnError',
        'verify_data_type_values': 'verifyDataTypeValues',
        'verify_language_tags': 'verifyLanguageTags'
    }

    def __init__(self, fail_on_unknown_data_types=None, fail_on_unknown_language_tags=None, normalize_data_type_values=None, normalize_language_tags=None, preserve_b_node_ids=None, stop_on_error=None, verify_data_type_values=None, verify_language_tags=None, _configuration=None):  # noqa: E501
        """ParserSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fail_on_unknown_data_types = None
        self._fail_on_unknown_language_tags = None
        self._normalize_data_type_values = None
        self._normalize_language_tags = None
        self._preserve_b_node_ids = None
        self._stop_on_error = None
        self._verify_data_type_values = None
        self._verify_language_tags = None
        self.discriminator = None

        if fail_on_unknown_data_types is not None:
            self.fail_on_unknown_data_types = fail_on_unknown_data_types
        if fail_on_unknown_language_tags is not None:
            self.fail_on_unknown_language_tags = fail_on_unknown_language_tags
        if normalize_data_type_values is not None:
            self.normalize_data_type_values = normalize_data_type_values
        if normalize_language_tags is not None:
            self.normalize_language_tags = normalize_language_tags
        if preserve_b_node_ids is not None:
            self.preserve_b_node_ids = preserve_b_node_ids
        if stop_on_error is not None:
            self.stop_on_error = stop_on_error
        if verify_data_type_values is not None:
            self.verify_data_type_values = verify_data_type_values
        if verify_language_tags is not None:
            self.verify_language_tags = verify_language_tags

    @property
    def fail_on_unknown_data_types(self):
        """Gets the fail_on_unknown_data_types of this ParserSettings.  # noqa: E501


        :return: The fail_on_unknown_data_types of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._fail_on_unknown_data_types

    @fail_on_unknown_data_types.setter
    def fail_on_unknown_data_types(self, fail_on_unknown_data_types):
        """Sets the fail_on_unknown_data_types of this ParserSettings.


        :param fail_on_unknown_data_types: The fail_on_unknown_data_types of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._fail_on_unknown_data_types = fail_on_unknown_data_types

    @property
    def fail_on_unknown_language_tags(self):
        """Gets the fail_on_unknown_language_tags of this ParserSettings.  # noqa: E501


        :return: The fail_on_unknown_language_tags of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._fail_on_unknown_language_tags

    @fail_on_unknown_language_tags.setter
    def fail_on_unknown_language_tags(self, fail_on_unknown_language_tags):
        """Sets the fail_on_unknown_language_tags of this ParserSettings.


        :param fail_on_unknown_language_tags: The fail_on_unknown_language_tags of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._fail_on_unknown_language_tags = fail_on_unknown_language_tags

    @property
    def normalize_data_type_values(self):
        """Gets the normalize_data_type_values of this ParserSettings.  # noqa: E501


        :return: The normalize_data_type_values of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._normalize_data_type_values

    @normalize_data_type_values.setter
    def normalize_data_type_values(self, normalize_data_type_values):
        """Sets the normalize_data_type_values of this ParserSettings.


        :param normalize_data_type_values: The normalize_data_type_values of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._normalize_data_type_values = normalize_data_type_values

    @property
    def normalize_language_tags(self):
        """Gets the normalize_language_tags of this ParserSettings.  # noqa: E501


        :return: The normalize_language_tags of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._normalize_language_tags

    @normalize_language_tags.setter
    def normalize_language_tags(self, normalize_language_tags):
        """Sets the normalize_language_tags of this ParserSettings.


        :param normalize_language_tags: The normalize_language_tags of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._normalize_language_tags = normalize_language_tags

    @property
    def preserve_b_node_ids(self):
        """Gets the preserve_b_node_ids of this ParserSettings.  # noqa: E501


        :return: The preserve_b_node_ids of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_b_node_ids

    @preserve_b_node_ids.setter
    def preserve_b_node_ids(self, preserve_b_node_ids):
        """Sets the preserve_b_node_ids of this ParserSettings.


        :param preserve_b_node_ids: The preserve_b_node_ids of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._preserve_b_node_ids = preserve_b_node_ids

    @property
    def stop_on_error(self):
        """Gets the stop_on_error of this ParserSettings.  # noqa: E501


        :return: The stop_on_error of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._stop_on_error

    @stop_on_error.setter
    def stop_on_error(self, stop_on_error):
        """Sets the stop_on_error of this ParserSettings.


        :param stop_on_error: The stop_on_error of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._stop_on_error = stop_on_error

    @property
    def verify_data_type_values(self):
        """Gets the verify_data_type_values of this ParserSettings.  # noqa: E501


        :return: The verify_data_type_values of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._verify_data_type_values

    @verify_data_type_values.setter
    def verify_data_type_values(self, verify_data_type_values):
        """Sets the verify_data_type_values of this ParserSettings.


        :param verify_data_type_values: The verify_data_type_values of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._verify_data_type_values = verify_data_type_values

    @property
    def verify_language_tags(self):
        """Gets the verify_language_tags of this ParserSettings.  # noqa: E501


        :return: The verify_language_tags of this ParserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._verify_language_tags

    @verify_language_tags.setter
    def verify_language_tags(self, verify_language_tags):
        """Sets the verify_language_tags of this ParserSettings.


        :param verify_language_tags: The verify_language_tags of this ParserSettings.  # noqa: E501
        :type: bool
        """

        self._verify_language_tags = verify_language_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParserSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParserSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParserSettings):
            return True

        return self.to_dict() != other.to_dict()
