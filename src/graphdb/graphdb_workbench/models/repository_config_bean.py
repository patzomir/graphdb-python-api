# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from graphdb.graphdb_workbench.configuration import Configuration


class RepositoryConfigBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'location': 'str',
        'params': 'dict(str, OwlimParameter)',
        'sesame_type': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'params': 'params',
        'sesame_type': 'sesameType',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, id=None, location=None, params=None, sesame_type=None, title=None, type=None, _configuration=None):  # noqa: E501
        """RepositoryConfigBean - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._location = None
        self._params = None
        self._sesame_type = None
        self._title = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if params is not None:
            self.params = params
        if sesame_type is not None:
            self.sesame_type = sesame_type
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this RepositoryConfigBean.  # noqa: E501


        :return: The id of this RepositoryConfigBean.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepositoryConfigBean.


        :param id: The id of this RepositoryConfigBean.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this RepositoryConfigBean.  # noqa: E501


        :return: The location of this RepositoryConfigBean.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RepositoryConfigBean.


        :param location: The location of this RepositoryConfigBean.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def params(self):
        """Gets the params of this RepositoryConfigBean.  # noqa: E501


        :return: The params of this RepositoryConfigBean.  # noqa: E501
        :rtype: dict(str, OwlimParameter)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this RepositoryConfigBean.


        :param params: The params of this RepositoryConfigBean.  # noqa: E501
        :type: dict(str, OwlimParameter)
        """

        self._params = params

    @property
    def sesame_type(self):
        """Gets the sesame_type of this RepositoryConfigBean.  # noqa: E501


        :return: The sesame_type of this RepositoryConfigBean.  # noqa: E501
        :rtype: str
        """
        return self._sesame_type

    @sesame_type.setter
    def sesame_type(self, sesame_type):
        """Sets the sesame_type of this RepositoryConfigBean.


        :param sesame_type: The sesame_type of this RepositoryConfigBean.  # noqa: E501
        :type: str
        """

        self._sesame_type = sesame_type

    @property
    def title(self):
        """Gets the title of this RepositoryConfigBean.  # noqa: E501


        :return: The title of this RepositoryConfigBean.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RepositoryConfigBean.


        :param title: The title of this RepositoryConfigBean.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this RepositoryConfigBean.  # noqa: E501


        :return: The type of this RepositoryConfigBean.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RepositoryConfigBean.


        :param type: The type of this RepositoryConfigBean.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryConfigBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryConfigBean):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryConfigBean):
            return True

        return self.to_dict() != other.to_dict()
