# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from graphdb.graphdb_workbench.configuration import Configuration


class GraphDBRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_url': 'str',
        'id': 'str',
        'local': 'bool',
        'location': 'str',
        'readable': 'bool',
        'sesame_type': 'str',
        'state': 'str',
        'title': 'str',
        'type': 'str',
        'unsupported': 'bool',
        'uri': 'str',
        'writable': 'bool'
    }

    attribute_map = {
        'external_url': 'externalUrl',
        'id': 'id',
        'local': 'local',
        'location': 'location',
        'readable': 'readable',
        'sesame_type': 'sesameType',
        'state': 'state',
        'title': 'title',
        'type': 'type',
        'unsupported': 'unsupported',
        'uri': 'uri',
        'writable': 'writable'
    }

    def __init__(self, external_url=None, id=None, local=None, location=None, readable=None, sesame_type=None, state=None, title=None, type=None, unsupported=None, uri=None, writable=None, _configuration=None):  # noqa: E501
        """GraphDBRepository - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._external_url = None
        self._id = None
        self._local = None
        self._location = None
        self._readable = None
        self._sesame_type = None
        self._state = None
        self._title = None
        self._type = None
        self._unsupported = None
        self._uri = None
        self._writable = None
        self.discriminator = None

        if external_url is not None:
            self.external_url = external_url
        if id is not None:
            self.id = id
        if local is not None:
            self.local = local
        if location is not None:
            self.location = location
        if readable is not None:
            self.readable = readable
        if sesame_type is not None:
            self.sesame_type = sesame_type
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if unsupported is not None:
            self.unsupported = unsupported
        if uri is not None:
            self.uri = uri
        if writable is not None:
            self.writable = writable

    @property
    def external_url(self):
        """Gets the external_url of this GraphDBRepository.  # noqa: E501


        :return: The external_url of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this GraphDBRepository.


        :param external_url: The external_url of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def id(self):
        """Gets the id of this GraphDBRepository.  # noqa: E501


        :return: The id of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GraphDBRepository.


        :param id: The id of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def local(self):
        """Gets the local of this GraphDBRepository.  # noqa: E501


        :return: The local of this GraphDBRepository.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this GraphDBRepository.


        :param local: The local of this GraphDBRepository.  # noqa: E501
        :type: bool
        """

        self._local = local

    @property
    def location(self):
        """Gets the location of this GraphDBRepository.  # noqa: E501


        :return: The location of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GraphDBRepository.


        :param location: The location of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def readable(self):
        """Gets the readable of this GraphDBRepository.  # noqa: E501


        :return: The readable of this GraphDBRepository.  # noqa: E501
        :rtype: bool
        """
        return self._readable

    @readable.setter
    def readable(self, readable):
        """Sets the readable of this GraphDBRepository.


        :param readable: The readable of this GraphDBRepository.  # noqa: E501
        :type: bool
        """

        self._readable = readable

    @property
    def sesame_type(self):
        """Gets the sesame_type of this GraphDBRepository.  # noqa: E501


        :return: The sesame_type of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._sesame_type

    @sesame_type.setter
    def sesame_type(self, sesame_type):
        """Sets the sesame_type of this GraphDBRepository.


        :param sesame_type: The sesame_type of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._sesame_type = sesame_type

    @property
    def state(self):
        """Gets the state of this GraphDBRepository.  # noqa: E501


        :return: The state of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GraphDBRepository.


        :param state: The state of this GraphDBRepository.  # noqa: E501
        :type: str
        """
        allowed_values = ["INACTIVE", "STARTING", "RUNNING", "RESTARTING", "STOPPING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this GraphDBRepository.  # noqa: E501


        :return: The title of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GraphDBRepository.


        :param title: The title of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this GraphDBRepository.  # noqa: E501


        :return: The type of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GraphDBRepository.


        :param type: The type of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unsupported(self):
        """Gets the unsupported of this GraphDBRepository.  # noqa: E501


        :return: The unsupported of this GraphDBRepository.  # noqa: E501
        :rtype: bool
        """
        return self._unsupported

    @unsupported.setter
    def unsupported(self, unsupported):
        """Sets the unsupported of this GraphDBRepository.


        :param unsupported: The unsupported of this GraphDBRepository.  # noqa: E501
        :type: bool
        """

        self._unsupported = unsupported

    @property
    def uri(self):
        """Gets the uri of this GraphDBRepository.  # noqa: E501


        :return: The uri of this GraphDBRepository.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GraphDBRepository.


        :param uri: The uri of this GraphDBRepository.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def writable(self):
        """Gets the writable of this GraphDBRepository.  # noqa: E501


        :return: The writable of this GraphDBRepository.  # noqa: E501
        :rtype: bool
        """
        return self._writable

    @writable.setter
    def writable(self, writable):
        """Sets the writable of this GraphDBRepository.


        :param writable: The writable of this GraphDBRepository.  # noqa: E501
        :type: bool
        """

        self._writable = writable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphDBRepository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphDBRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraphDBRepository):
            return True

        return self.to_dict() != other.to_dict()
