# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from graphdb.graphdb_workbench.configuration import Configuration


class ImportSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_uri': 'str',
        'context': 'str',
        'data': 'str',
        'force_serial': 'bool',
        'format': 'str',
        'message': 'str',
        'name': 'str',
        'parser_settings': 'ParserSettings',
        'replace_graphs': 'list[str]',
        'request_id_headers_to_forward': 'dict(str, str)',
        'status': 'str',
        'timestamp': 'int',
        'type': 'str'
    }

    attribute_map = {
        'base_uri': 'baseURI',
        'context': 'context',
        'data': 'data',
        'force_serial': 'forceSerial',
        'format': 'format',
        'message': 'message',
        'name': 'name',
        'parser_settings': 'parserSettings',
        'replace_graphs': 'replaceGraphs',
        'request_id_headers_to_forward': 'requestIdHeadersToForward',
        'status': 'status',
        'timestamp': 'timestamp',
        'type': 'type'
    }

    def __init__(self, base_uri=None, context=None, data=None, force_serial=None, format=None, message=None, name=None, parser_settings=None, replace_graphs=None, request_id_headers_to_forward=None, status=None, timestamp=None, type=None, _configuration=None):  # noqa: E501
        """ImportSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_uri = None
        self._context = None
        self._data = None
        self._force_serial = None
        self._format = None
        self._message = None
        self._name = None
        self._parser_settings = None
        self._replace_graphs = None
        self._request_id_headers_to_forward = None
        self._status = None
        self._timestamp = None
        self._type = None
        self.discriminator = None

        if base_uri is not None:
            self.base_uri = base_uri
        if context is not None:
            self.context = context
        if data is not None:
            self.data = data
        if force_serial is not None:
            self.force_serial = force_serial
        if format is not None:
            self.format = format
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if parser_settings is not None:
            self.parser_settings = parser_settings
        if replace_graphs is not None:
            self.replace_graphs = replace_graphs
        if request_id_headers_to_forward is not None:
            self.request_id_headers_to_forward = request_id_headers_to_forward
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp
        if type is not None:
            self.type = type

    @property
    def base_uri(self):
        """Gets the base_uri of this ImportSettings.  # noqa: E501


        :return: The base_uri of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this ImportSettings.


        :param base_uri: The base_uri of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._base_uri = base_uri

    @property
    def context(self):
        """Gets the context of this ImportSettings.  # noqa: E501


        :return: The context of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ImportSettings.


        :param context: The context of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def data(self):
        """Gets the data of this ImportSettings.  # noqa: E501


        :return: The data of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ImportSettings.


        :param data: The data of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def force_serial(self):
        """Gets the force_serial of this ImportSettings.  # noqa: E501


        :return: The force_serial of this ImportSettings.  # noqa: E501
        :rtype: bool
        """
        return self._force_serial

    @force_serial.setter
    def force_serial(self, force_serial):
        """Sets the force_serial of this ImportSettings.


        :param force_serial: The force_serial of this ImportSettings.  # noqa: E501
        :type: bool
        """

        self._force_serial = force_serial

    @property
    def format(self):
        """Gets the format of this ImportSettings.  # noqa: E501


        :return: The format of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ImportSettings.


        :param format: The format of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def message(self):
        """Gets the message of this ImportSettings.  # noqa: E501


        :return: The message of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ImportSettings.


        :param message: The message of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this ImportSettings.  # noqa: E501


        :return: The name of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportSettings.


        :param name: The name of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parser_settings(self):
        """Gets the parser_settings of this ImportSettings.  # noqa: E501


        :return: The parser_settings of this ImportSettings.  # noqa: E501
        :rtype: ParserSettings
        """
        return self._parser_settings

    @parser_settings.setter
    def parser_settings(self, parser_settings):
        """Sets the parser_settings of this ImportSettings.


        :param parser_settings: The parser_settings of this ImportSettings.  # noqa: E501
        :type: ParserSettings
        """

        self._parser_settings = parser_settings

    @property
    def replace_graphs(self):
        """Gets the replace_graphs of this ImportSettings.  # noqa: E501


        :return: The replace_graphs of this ImportSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._replace_graphs

    @replace_graphs.setter
    def replace_graphs(self, replace_graphs):
        """Sets the replace_graphs of this ImportSettings.


        :param replace_graphs: The replace_graphs of this ImportSettings.  # noqa: E501
        :type: list[str]
        """

        self._replace_graphs = replace_graphs

    @property
    def request_id_headers_to_forward(self):
        """Gets the request_id_headers_to_forward of this ImportSettings.  # noqa: E501


        :return: The request_id_headers_to_forward of this ImportSettings.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._request_id_headers_to_forward

    @request_id_headers_to_forward.setter
    def request_id_headers_to_forward(self, request_id_headers_to_forward):
        """Sets the request_id_headers_to_forward of this ImportSettings.


        :param request_id_headers_to_forward: The request_id_headers_to_forward of this ImportSettings.  # noqa: E501
        :type: dict(str, str)
        """

        self._request_id_headers_to_forward = request_id_headers_to_forward

    @property
    def status(self):
        """Gets the status of this ImportSettings.  # noqa: E501


        :return: The status of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportSettings.


        :param status: The status of this ImportSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "IMPORTING", "DONE", "ERROR", "NONE", "INTERRUPTING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this ImportSettings.  # noqa: E501


        :return: The timestamp of this ImportSettings.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ImportSettings.


        :param timestamp: The timestamp of this ImportSettings.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this ImportSettings.  # noqa: E501


        :return: The type of this ImportSettings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportSettings.


        :param type: The type of this ImportSettings.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportSettings):
            return True

        return self.to_dict() != other.to_dict()
