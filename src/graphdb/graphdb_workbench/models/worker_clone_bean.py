# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from graphdb.graphdb_workbench.configuration import Configuration


class WorkerCloneBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloning_node_location': 'str',
        'cloning_node_repository_id': 'str',
        'new_node_location': 'str',
        'new_node_repository_id': 'str',
        'new_node_title': 'str'
    }

    attribute_map = {
        'cloning_node_location': 'cloningNodeLocation',
        'cloning_node_repository_id': 'cloningNodeRepositoryID',
        'new_node_location': 'newNodeLocation',
        'new_node_repository_id': 'newNodeRepositoryID',
        'new_node_title': 'newNodeTitle'
    }

    def __init__(self, cloning_node_location=None, cloning_node_repository_id=None, new_node_location=None, new_node_repository_id=None, new_node_title=None, _configuration=None):  # noqa: E501
        """WorkerCloneBean - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cloning_node_location = None
        self._cloning_node_repository_id = None
        self._new_node_location = None
        self._new_node_repository_id = None
        self._new_node_title = None
        self.discriminator = None

        if cloning_node_location is not None:
            self.cloning_node_location = cloning_node_location
        if cloning_node_repository_id is not None:
            self.cloning_node_repository_id = cloning_node_repository_id
        if new_node_location is not None:
            self.new_node_location = new_node_location
        if new_node_repository_id is not None:
            self.new_node_repository_id = new_node_repository_id
        if new_node_title is not None:
            self.new_node_title = new_node_title

    @property
    def cloning_node_location(self):
        """Gets the cloning_node_location of this WorkerCloneBean.  # noqa: E501


        :return: The cloning_node_location of this WorkerCloneBean.  # noqa: E501
        :rtype: str
        """
        return self._cloning_node_location

    @cloning_node_location.setter
    def cloning_node_location(self, cloning_node_location):
        """Sets the cloning_node_location of this WorkerCloneBean.


        :param cloning_node_location: The cloning_node_location of this WorkerCloneBean.  # noqa: E501
        :type: str
        """

        self._cloning_node_location = cloning_node_location

    @property
    def cloning_node_repository_id(self):
        """Gets the cloning_node_repository_id of this WorkerCloneBean.  # noqa: E501


        :return: The cloning_node_repository_id of this WorkerCloneBean.  # noqa: E501
        :rtype: str
        """
        return self._cloning_node_repository_id

    @cloning_node_repository_id.setter
    def cloning_node_repository_id(self, cloning_node_repository_id):
        """Sets the cloning_node_repository_id of this WorkerCloneBean.


        :param cloning_node_repository_id: The cloning_node_repository_id of this WorkerCloneBean.  # noqa: E501
        :type: str
        """

        self._cloning_node_repository_id = cloning_node_repository_id

    @property
    def new_node_location(self):
        """Gets the new_node_location of this WorkerCloneBean.  # noqa: E501


        :return: The new_node_location of this WorkerCloneBean.  # noqa: E501
        :rtype: str
        """
        return self._new_node_location

    @new_node_location.setter
    def new_node_location(self, new_node_location):
        """Sets the new_node_location of this WorkerCloneBean.


        :param new_node_location: The new_node_location of this WorkerCloneBean.  # noqa: E501
        :type: str
        """

        self._new_node_location = new_node_location

    @property
    def new_node_repository_id(self):
        """Gets the new_node_repository_id of this WorkerCloneBean.  # noqa: E501


        :return: The new_node_repository_id of this WorkerCloneBean.  # noqa: E501
        :rtype: str
        """
        return self._new_node_repository_id

    @new_node_repository_id.setter
    def new_node_repository_id(self, new_node_repository_id):
        """Sets the new_node_repository_id of this WorkerCloneBean.


        :param new_node_repository_id: The new_node_repository_id of this WorkerCloneBean.  # noqa: E501
        :type: str
        """

        self._new_node_repository_id = new_node_repository_id

    @property
    def new_node_title(self):
        """Gets the new_node_title of this WorkerCloneBean.  # noqa: E501


        :return: The new_node_title of this WorkerCloneBean.  # noqa: E501
        :rtype: str
        """
        return self._new_node_title

    @new_node_title.setter
    def new_node_title(self, new_node_title):
        """Sets the new_node_title of this WorkerCloneBean.


        :param new_node_title: The new_node_title of this WorkerCloneBean.  # noqa: E501
        :type: str
        """

        self._new_node_title = new_node_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerCloneBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerCloneBean):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerCloneBean):
            return True

        return self.to_dict() != other.to_dict()
