# coding: utf-8

"""
    GraphDB Workbench API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from graphdb.graphdb_workbench.api_client import ApiClient


class SqlViewsControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_sql_view_using_post(self, x_graph_db_repository, sql_view, **kwargs):  # noqa: E501
        """Create a new SQL view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sql_view_using_post(x_graph_db_repository, sql_view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param SqlView sql_view: sqlView (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_sql_view_using_post_with_http_info(x_graph_db_repository, sql_view, **kwargs)  # noqa: E501
        else:
            (data) = self.create_sql_view_using_post_with_http_info(x_graph_db_repository, sql_view, **kwargs)  # noqa: E501
            return data

    def create_sql_view_using_post_with_http_info(self, x_graph_db_repository, sql_view, **kwargs):  # noqa: E501
        """Create a new SQL view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sql_view_using_post_with_http_info(x_graph_db_repository, sql_view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param SqlView sql_view: sqlView (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_graph_db_repository', 'sql_view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sql_view_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_graph_db_repository' is set
        if self.api_client.client_side_validation and ('x_graph_db_repository' not in params or
                                                       params['x_graph_db_repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_graph_db_repository` when calling `create_sql_view_using_post`")  # noqa: E501
        # verify the required parameter 'sql_view' is set
        if self.api_client.client_side_validation and ('sql_view' not in params or
                                                       params['sql_view'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sql_view` when calling `create_sql_view_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_graph_db_repository' in params:
            header_params['X-GraphDB-Repository'] = params['x_graph_db_repository']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sql_view' in params:
            body_params = params['sql_view']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/sql-views/tables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sql_view_using_delete(self, x_graph_db_repository, name, **kwargs):  # noqa: E501
        """Delete an existing saved query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sql_view_using_delete(x_graph_db_repository, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param str name: The name of the SQL view (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sql_view_using_delete_with_http_info(x_graph_db_repository, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sql_view_using_delete_with_http_info(x_graph_db_repository, name, **kwargs)  # noqa: E501
            return data

    def delete_sql_view_using_delete_with_http_info(self, x_graph_db_repository, name, **kwargs):  # noqa: E501
        """Delete an existing saved query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sql_view_using_delete_with_http_info(x_graph_db_repository, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param str name: The name of the SQL view (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_graph_db_repository', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sql_view_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_graph_db_repository' is set
        if self.api_client.client_side_validation and ('x_graph_db_repository' not in params or
                                                       params['x_graph_db_repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_graph_db_repository` when calling `delete_sql_view_using_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `delete_sql_view_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_graph_db_repository' in params:
            header_params['X-GraphDB-Repository'] = params['x_graph_db_repository']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/sql-views/tables/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sql_view_names_using_get(self, x_graph_db_repository, **kwargs):  # noqa: E501
        """Get all SQL view names for current repository.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sql_view_names_using_get(x_graph_db_repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sql_view_names_using_get_with_http_info(x_graph_db_repository, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sql_view_names_using_get_with_http_info(x_graph_db_repository, **kwargs)  # noqa: E501
            return data

    def get_sql_view_names_using_get_with_http_info(self, x_graph_db_repository, **kwargs):  # noqa: E501
        """Get all SQL view names for current repository.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sql_view_names_using_get_with_http_info(x_graph_db_repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_graph_db_repository']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sql_view_names_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_graph_db_repository' is set
        if self.api_client.client_side_validation and ('x_graph_db_repository' not in params or
                                                       params['x_graph_db_repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_graph_db_repository` when calling `get_sql_view_names_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_graph_db_repository' in params:
            header_params['X-GraphDB-Repository'] = params['x_graph_db_repository']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/sql-views/tables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sql_view_using_get(self, x_graph_db_repository, name, **kwargs):  # noqa: E501
        """Get a SQL view configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sql_view_using_get(x_graph_db_repository, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param str name: The name of the SQL view (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sql_view_using_get_with_http_info(x_graph_db_repository, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sql_view_using_get_with_http_info(x_graph_db_repository, name, **kwargs)  # noqa: E501
            return data

    def get_sql_view_using_get_with_http_info(self, x_graph_db_repository, name, **kwargs):  # noqa: E501
        """Get a SQL view configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sql_view_using_get_with_http_info(x_graph_db_repository, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param str name: The name of the SQL view (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_graph_db_repository', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sql_view_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_graph_db_repository' is set
        if self.api_client.client_side_validation and ('x_graph_db_repository' not in params or
                                                       params['x_graph_db_repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_graph_db_repository` when calling `get_sql_view_using_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_sql_view_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_graph_db_repository' in params:
            header_params['X-GraphDB-Repository'] = params['x_graph_db_repository']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/sql-views/tables/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_sql_view_using_put(self, x_graph_db_repository, name, sql_view, **kwargs):  # noqa: E501
        """Edit an existing SQL view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sql_view_using_put(x_graph_db_repository, name, sql_view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param str name: The name of the SQL view (required)
        :param SqlView sql_view: sqlView (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_sql_view_using_put_with_http_info(x_graph_db_repository, name, sql_view, **kwargs)  # noqa: E501
        else:
            (data) = self.update_sql_view_using_put_with_http_info(x_graph_db_repository, name, sql_view, **kwargs)  # noqa: E501
            return data

    def update_sql_view_using_put_with_http_info(self, x_graph_db_repository, name, sql_view, **kwargs):  # noqa: E501
        """Edit an existing SQL view  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_sql_view_using_put_with_http_info(x_graph_db_repository, name, sql_view, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_graph_db_repository: The repository for which you want to use the JDBC driver (required)
        :param str name: The name of the SQL view (required)
        :param SqlView sql_view: sqlView (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_graph_db_repository', 'name', 'sql_view']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sql_view_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_graph_db_repository' is set
        if self.api_client.client_side_validation and ('x_graph_db_repository' not in params or
                                                       params['x_graph_db_repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `x_graph_db_repository` when calling `update_sql_view_using_put`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `update_sql_view_using_put`")  # noqa: E501
        # verify the required parameter 'sql_view' is set
        if self.api_client.client_side_validation and ('sql_view' not in params or
                                                       params['sql_view'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sql_view` when calling `update_sql_view_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_graph_db_repository' in params:
            header_params['X-GraphDB-Repository'] = params['x_graph_db_repository']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sql_view' in params:
            body_params = params['sql_view']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/rest/sql-views/tables/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
