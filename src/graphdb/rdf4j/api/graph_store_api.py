# coding: utf-8

"""
    RDF4J API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from graphdb.rdf4j.api_client import ApiClient


class GraphStoreApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_statements_to_indirect_namedgraph(self, repository_id, graph, rdf_data, **kwargs):  # noqa: E501
        """Add statements to an INDIRECTLY referenced named graph  # noqa: E501

        Add statements to an INDIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_statements_to_indirect_namedgraph(repository_id, graph, rdf_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: Indirectly referenced named graph name. The named graph URI is mentioned as the value of this parameter. E.g. \"http://example.org/graph1\" (required)
        :param str rdf_data: Valid RDF data is some of the available formats. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_statements_to_indirect_namedgraph_with_http_info(repository_id, graph, rdf_data, **kwargs)  # noqa: E501
        else:
            (data) = self.add_statements_to_indirect_namedgraph_with_http_info(repository_id, graph, rdf_data, **kwargs)  # noqa: E501
            return data

    def add_statements_to_indirect_namedgraph_with_http_info(self, repository_id, graph, rdf_data, **kwargs):  # noqa: E501
        """Add statements to an INDIRECTLY referenced named graph  # noqa: E501

        Add statements to an INDIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_statements_to_indirect_namedgraph_with_http_info(repository_id, graph, rdf_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: Indirectly referenced named graph name. The named graph URI is mentioned as the value of this parameter. E.g. \"http://example.org/graph1\" (required)
        :param str rdf_data: Valid RDF data is some of the available formats. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id', 'graph', 'rdf_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_statements_to_indirect_namedgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and ('repository_id' not in params or
                                                       params['repository_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository_id` when calling `add_statements_to_indirect_namedgraph`")  # noqa: E501
        # verify the required parameter 'graph' is set
        if self.api_client.client_side_validation and ('graph' not in params or
                                                       params['graph'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `graph` when calling `add_statements_to_indirect_namedgraph`")  # noqa: E501
        # verify the required parameter 'rdf_data' is set
        if self.api_client.client_side_validation and ('rdf_data' not in params or
                                                       params['rdf_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rdf_data` when calling `add_statements_to_indirect_namedgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryID'] = params['repository_id']  # noqa: E501

        query_params = []
        if 'graph' in params:
            query_params.append(('graph', params['graph']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rdf_data' in params:
            body_params = params['rdf_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/rdf+xml', 'text/plain', 'text/turtle', 'text/rdf+n3', 'text/x-nquads', 'application/rdf+json', 'application/trix', 'application/x-trig', 'application/x-binary-rdf'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryID}/rdf-graphs/service', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_statements_to_namedgraph(self, repository_id, graph, data, **kwargs):  # noqa: E501
        """Add statements to a DIRECTLY referenced named graph  # noqa: E501

        Add statements to a DIRECTLY referenced named graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_statements_to_namedgraph(repository_id, graph, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: IRI uniquely identifying a named graph. E.g. \"graph1\". The whole url is read as a named graph and statements from it can be retrieved. (required)
        :param str data: Valid RDF data is some of the available formats. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_statements_to_namedgraph_with_http_info(repository_id, graph, data, **kwargs)  # noqa: E501
        else:
            (data) = self.add_statements_to_namedgraph_with_http_info(repository_id, graph, data, **kwargs)  # noqa: E501
            return data

    def add_statements_to_namedgraph_with_http_info(self, repository_id, graph, data, **kwargs):  # noqa: E501
        """Add statements to a DIRECTLY referenced named graph  # noqa: E501

        Add statements to a DIRECTLY referenced named graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_statements_to_namedgraph_with_http_info(repository_id, graph, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: IRI uniquely identifying a named graph. E.g. \"graph1\". The whole url is read as a named graph and statements from it can be retrieved. (required)
        :param str data: Valid RDF data is some of the available formats. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id', 'graph', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_statements_to_namedgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and ('repository_id' not in params or
                                                       params['repository_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository_id` when calling `add_statements_to_namedgraph`")  # noqa: E501
        # verify the required parameter 'graph' is set
        if self.api_client.client_side_validation and ('graph' not in params or
                                                       params['graph'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `graph` when calling `add_statements_to_namedgraph`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `add_statements_to_namedgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryID'] = params['repository_id']  # noqa: E501
        if 'graph' in params:
            path_params['graph'] = params['graph']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/rdf+xml', 'text/plain', 'text/turtle', 'text/rdf+n3', 'text/x-nquads', 'application/rdf+json', 'application/trix', 'application/x-trig', 'application/x-binary-rdf'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryID}/rdf-graphs/{graph}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_statements_from_indirect_namedgraph(self, repository_id, graph, **kwargs):  # noqa: E501
        """Clear an INDIRECTLY referenced named graph  # noqa: E501

        Clear an INDIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statements_from_indirect_namedgraph(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: Indirectly referenced named graph name. The named graph URI is mentioned as the value of this parameter. E.g. \"http://example.org/graph1\" (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_statements_from_indirect_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_statements_from_indirect_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
            return data

    def delete_statements_from_indirect_namedgraph_with_http_info(self, repository_id, graph, **kwargs):  # noqa: E501
        """Clear an INDIRECTLY referenced named graph  # noqa: E501

        Clear an INDIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statements_from_indirect_namedgraph_with_http_info(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: Indirectly referenced named graph name. The named graph URI is mentioned as the value of this parameter. E.g. \"http://example.org/graph1\" (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id', 'graph']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_statements_from_indirect_namedgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and ('repository_id' not in params or
                                                       params['repository_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository_id` when calling `delete_statements_from_indirect_namedgraph`")  # noqa: E501
        # verify the required parameter 'graph' is set
        if self.api_client.client_side_validation and ('graph' not in params or
                                                       params['graph'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `graph` when calling `delete_statements_from_indirect_namedgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryID'] = params['repository_id']  # noqa: E501

        query_params = []
        if 'graph' in params:
            query_params.append(('graph', params['graph']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryID}/rdf-graphs/service', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_statements_from_namedgraph(self, repository_id, graph, **kwargs):  # noqa: E501
        """Clear a DIRECTLY referenced named graph  # noqa: E501

        Clear a DIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statements_from_namedgraph(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: IRI uniquely identifying a named graph. The whole url is read as a named graph and statements from it can be retrieved. E.g. \"graph1\" (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_statements_from_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_statements_from_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
            return data

    def delete_statements_from_namedgraph_with_http_info(self, repository_id, graph, **kwargs):  # noqa: E501
        """Clear a DIRECTLY referenced named graph  # noqa: E501

        Clear a DIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_statements_from_namedgraph_with_http_info(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: IRI uniquely identifying a named graph. The whole url is read as a named graph and statements from it can be retrieved. E.g. \"graph1\" (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id', 'graph']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_statements_from_namedgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and ('repository_id' not in params or
                                                       params['repository_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository_id` when calling `delete_statements_from_namedgraph`")  # noqa: E501
        # verify the required parameter 'graph' is set
        if self.api_client.client_side_validation and ('graph' not in params or
                                                       params['graph'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `graph` when calling `delete_statements_from_namedgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryID'] = params['repository_id']  # noqa: E501
        if 'graph' in params:
            path_params['graph'] = params['graph']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryID}/rdf-graphs/{graph}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_statements_from_indirect_namedgraph(self, repository_id, graph, **kwargs):  # noqa: E501
        """Fetch all statements from an INDIRECTLY referenced named graph  # noqa: E501

        Fetch all statements from an INDIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_statements_from_indirect_namedgraph(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: Indirectly referenced named graph name. The named graph URI is mentioned as the value of this parameter. E.g. \"http://example.org/graph1\" (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_statements_from_indirect_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_statements_from_indirect_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
            return data

    def get_all_statements_from_indirect_namedgraph_with_http_info(self, repository_id, graph, **kwargs):  # noqa: E501
        """Fetch all statements from an INDIRECTLY referenced named graph  # noqa: E501

        Fetch all statements from an INDIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_statements_from_indirect_namedgraph_with_http_info(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: Indirectly referenced named graph name. The named graph URI is mentioned as the value of this parameter. E.g. \"http://example.org/graph1\" (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id', 'graph']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_statements_from_indirect_namedgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and ('repository_id' not in params or
                                                       params['repository_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository_id` when calling `get_all_statements_from_indirect_namedgraph`")  # noqa: E501
        # verify the required parameter 'graph' is set
        if self.api_client.client_side_validation and ('graph' not in params or
                                                       params['graph'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `graph` when calling `get_all_statements_from_indirect_namedgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryID'] = params['repository_id']  # noqa: E501

        query_params = []
        if 'graph' in params:
            query_params.append(('graph', params['graph']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/rdf+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryID}/rdf-graphs/service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_statements_from_namedgraph(self, repository_id, graph, **kwargs):  # noqa: E501
        """Fetch all statements from a DIRECTLY referenced named graph  # noqa: E501

        Fetch all statements from a DIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_statements_from_namedgraph(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: IRI uniquely identifying a named graph. After the request is executed the whole url is read as a named graph and statements from it can be retrieved. E.g. \"graph1\". (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_statements_from_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_statements_from_namedgraph_with_http_info(repository_id, graph, **kwargs)  # noqa: E501
            return data

    def get_all_statements_from_namedgraph_with_http_info(self, repository_id, graph, **kwargs):  # noqa: E501
        """Fetch all statements from a DIRECTLY referenced named graph  # noqa: E501

        Fetch all statements from a DIRECTLY referenced named graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_statements_from_namedgraph_with_http_info(repository_id, graph, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: The repository ID (required)
        :param str graph: IRI uniquely identifying a named graph. After the request is executed the whole url is read as a named graph and statements from it can be retrieved. E.g. \"graph1\". (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id', 'graph']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_statements_from_namedgraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if self.api_client.client_side_validation and ('repository_id' not in params or
                                                       params['repository_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository_id` when calling `get_all_statements_from_namedgraph`")  # noqa: E501
        # verify the required parameter 'graph' is set
        if self.api_client.client_side_validation and ('graph' not in params or
                                                       params['graph'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `graph` when calling `get_all_statements_from_namedgraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryID'] = params['repository_id']  # noqa: E501
        if 'graph' in params:
            path_params['graph'] = params['graph']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/rdf+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repositoryID}/rdf-graphs/{graph}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
